                                ~~~~~~~~~~~~~~~~~~~~~~~~~
                                ~~~~~~INSTALLATION~~~~~~~
                                ~~~~~~~~~~~~~~~~~~~~~~~~~

1. You can get the R interface of package 'volesti' from
"https://github.com/TolisChal/volume_approximation/tree/volesti_tutorial".

  a. Download the zip file from the github and extract it locally.

  b. An alternative is to use git. In command line run:

```
$ git clone https://github.com/TolisChal/volume_approximation.git
$ cd volume_approximation
$ git checkout volesti_tutorial
```

                          ------------------------------------------------------

2. To install package open with Rstudio the file 'volesti.Rproj' in folder /R-proj. Then in Rstudio run:

  a. Then from `Build` in menu bar click `build source Package` and when build is done click `Install and Restart` or `Build and restart`.

  b. An alternative is to use Rstudio command line. Run:

```
> install.packages("devtools")
> Rcpp::compileAtributes()
> devtools::build()
> devtools::install()
```

  c. The package dependencies can be installed (only if needed!!):
```
> install.packages("Rcpp")
> install.packages("RcppEigen")
> install.packages("BH")
```

3. You will also need the package `Peacock.test` for the exercises, so run in Rstudio command line:

```
> install.packages("Peacock.test")
```


                                ~~~~~~~~~~~~~~~~~~~~~~~~~
                                ~~~~~~~HOW TO USE~~~~~~~~
                                ~~~~~~~~~~~~~~~~~~~~~~~~~
1. Generate Polytopes

You can use `volesti` to generate some well known and studied polytopes, such as hypercubes, simplices,
cross polytopes, skinny hypercubes, product of two simplices or random zonotopes. For example to generate
a 3d-dimensional cube run:

```
> PolyList = GenCube(3, 'H')
```

The first argument is the dimension and the second declares the representation of the polytope. The string
'H' is for the H-representation, when the polytope is defined by a set of linear inequalities, and 'V' is
for the V-representation, when the polytope is defined by a set of vertices.

The output, e.g. `PolyList`, is a R list that containes two elements: The PolyList$A is the \{ mxd \}
matrix A and PolyList$b is a \{ m \} dimensional vector b, s.t.: \{ Ax <= b \} for a d-dimensional
H-polytope with m facets.

For skinny hypercubes and product of simplices only H-representation is available. So for a skinny
hypercube run:

```
> PolyList = GenSkinnyCube(5)
```

This command will generate a 5-dimensional skinny hypercube.


                       ------------------------------------------------------




2. Sample From a Convex Polytope

You can use volesti to sample uniformly from a convex polytope. You have to use function sample_points().
The default method is coordinate directions hit-and-run. For example:

  a. To sample 1000 uniform points from a 10-dimensional cross polytope using Coordinate Directions
     Hit-and-Run run:

```
> PolyList = GenCross(10, 'H')
> sample = sample_points(A = PolyList$A, b = PolyList$b, N = 1000)
```

The output is \{ dxN \} matrix that containes column-wise the random points.
The default length for the random walk is \{ \floor{10 + 10/d} \}. If you want to give a different length
run:

```
> sample = sample_points(A = PolyList$A, b = PolyList$b, N = 1000, walk_length = 5)
```

  b. To sample 1000 uniform points from a 20-dimensional simplex using Random Directions Hit-and-Run run:
 
```
> PolyList = GenSimplex(20, 'H')
> sample = sample_points(A = PolyList$A, b = PolyList$b, N = 1000, coordinate = FALSE)
```

You can set the length of the HnR as before.

  c. To print the excecutional time use the flag `verbose`:

```
> PolyList = GenProdSimplex(5)
> sample = sample_points(A = PolyList$A, b = PolyList$b, N = 1000, verbose = TRUE)
```

                       ------------------------------------------------------
                               
3. Sample uniformly from a simplex.

To sample uniform points from a simplex you can use directly the function sample_simplex(). For example:

  a. To sample from a 10-dimensional unit simplex run:

> sample = sample_simplex(dimension = d, N = numpoints)

for example to sample 1000 points from a 3d unit simplex run:

> sample = sample_simplex(dimension = 3, N=1000)

  b. To sample from an arbitrary simlex you have to add the vertices in a matrix row-wise. Then run:

> sample = sample_simplex(vertices = V, N = 1000)

                       ------------------------------------------------------

4. Compute the volume of a convex polytope.

You can use volesti to compute the volume of a convex polytope. The default algorithm is SequenceOfBalls
and the default random walk algorithm is Coordinate directions HnR. For example:

  a. To compute a volume approximation of the 10-dimensional hypercube run:

```
> PolyList = GenCube(10, 'H')
> vol = volume(A = PolyList$A, b = PolyList$b)
```

To print all the computational steps and excecutional time use the flag verbose:

```
> vol = volume(A = PolyList$A, b = PolyList$b, verbose = TRUE)
```

  b. To use Random Directions Hit-and-Run or to change the length of the HnR run:

```
> vol = volume(A = PolyList$A, b = PolyList$b, walk_length = 20, coordinate = FALSE)
```

          ----------------------------------------------------------------------------------------

NOTES:

1. For the peacock test you have to give the transposed sample matrices you exctract from `volesti` functions.
   For example:
```
> peacock3(t(sample1), t(sample2))
``` 

2. You can also see the R script `sampling-tutorial.R` in folder /R-proj/inst.

    ~----------------------------------------------------------------------------------------------~
    ~!!Remember that the documentation `volesti.pdf` in folder /R-proj/inst/doc is always useful!! ~
    ~----------------------------------------------------------------------------------------------~





